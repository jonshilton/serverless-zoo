service: serverless-zoo

frameworkVersion: '>=1.21.0 <2.0.0'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET} # Specify where deployment artifacts should be uploaded.

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    port: 4000
  webpackIncludeModules: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Animals
            sources: [seed-data/Animals.json]

package:
  exclude:
    - .git/**
  individually: true

functions:
  create:
    handler: restHandler.create
    description: Create a new animal
    memorySize: 512 # Memory size in MB
    timeout: 10 # Timeout in seconds
    role: ServiceRole
    events:
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function
          path: /
          method: post
          cors: true # Turns on CORS for this endpoint
  read:
    handler: restHandler.read
    description: Read an animal by ID
    memorySize: 512
    timeout: 10
    role: ServiceRole
    events:
      - http:
          path: /{id}
          method: get
          cors: true
      - http:
          path: /
          method: get
          cors: true
  update:
    handler: restHandler.update
    description: Update an animal by ID
    memorySize: 512
    timeout: 10
    role: ServiceRole
    events:
      - http:
          path: /{id}
          method: put
          cors: true
  delete:
    handler: restHandler.delete
    description: Delete an animal by ID
    memorySize: 512
    timeout: 10
    role: ServiceRole
    events:
      - http:
          path: /{id}
          method: delete
          cors: true
  graphql:
    handler: graphqlHandler.graphql
    description: Handle GraphQL queries and mutations
    role: ServiceRole
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get

# AWS resources can be defined here using AWS CloudFormation notation
resources:
  Resources:
    AnimalTable: # Define an Animals DynamoDb Table
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: 'Animals'
    ServiceRole: # Define an IAM Role that will have permission to assume lambda role and perform dyanmoDb operations
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'DynamoRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Dynamo-ServiceRole-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:Query'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:UpdateItem'
                  Resource:
                    - 'arn:aws:dynamodb:eu-west-1:*:table/Animals'
                    - 'arn:aws:dynamodb:eu-west-1:*:table/Animals/*'
